spring:
  profiles:
    active: ${PROFILE}

---
#---------------------------------------------------
#            GLOBAL CONFIGURATION
#---------------------------------------------------


info:
  name: Projet Annuel
app:
  description: ${info.name} Coonerie
spring:
  application:
    name: Licorne
  http:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
application:
  version: 1.0
server:
  contextPath: /
  port: 8080

logging:
  level:
    org:
      springframework:
        web: error
        hibernate: error

clasifier.modelPB: /classifier/
watermark.text: BABAR service

# JPA  - USE this to generate table
spring.jpa.generate-ddl: true




---
#---------------------------------------------------
#            DEVELOPER  MODE
#---------------------------------------------------
spring:
  profiles: dev
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    generate-ddl: true
  jmx:
    enabled: true
  datasource:
    url: jdbc:postgresql://localhost:5432/projact
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver
    tomcat:
      max-wait: 10000
      max-active: 10
# Mailing (download fakeSMTP, and run with java -jar fakeSMTP.jar )
  mail:
    host: smtp.gmail.com
    port: 587
    username: EMAIL
    password: PASSWORD
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true
  thymeleaf:
    cache: false
    mode: HTML5


---
#---------------------------------------------------
#            TEST  MODE
#---------------------------------------------------
spring:
  profiles: test
  jpa:
    show-sql: true
  jmx:
    enabled: true
# Use GrrenMail (cf: http://www.icegreen.com/greenmail/)
  mail:
      host: smtp.gmail.com
      port: 587
      username: EMAIL ADDRESSE
      password: PASSWORD
      properties:
        mail:
          smtp:
            auth: true
            starttls.enable: true
server:
  port: 8080

# H2 (acces with localhost:port/h2 or localhost:port/h2-console/)
  h2:
    console:
      enabled: true
      path: /h2
# Datasource( The database URL jdbc:h2:~/test opens the database test in your user home directory)
  datasource:
    url: jdbc:h2:file:~/test
    username: sa
    password:
    driver-class-name: org.h2.Driver



---
#---------------------------------------------------
#            PRODUCTION  MODE
#---------------------------------------------------
spring:
  profiles: prod
  datasource:
    url: ${DATABASE_JDBC}
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    maxActive: 10
    maxIdle: 5
    min-idle: 2
    initialSize: 5
    removeAbandoned: true
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: false
    database: POSTGRESQL
    hibernate:
      ddl-auto: create-drop
    generate-ddl: true
  tomcat:
    max-wait: 10000
    max-active: 10
  jmx:
    enabled: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL}
    password: ${EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls.enable: true
  thymeleaf:
      cache: false
      mode: HTML5

